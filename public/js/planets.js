d3.json('/data/planets.json').then(data => {
  const planets = data.planetDiameters

  const div = d3.select('body')
  const margin = { top: 200, right: 200, bottom: 200, left: 200 }
  const width = window.innerWidth - margin.left - margin.right
  const height = window.innerHeight - margin.top - margin.bottom
  const svg = div.append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .style('background-color', '#11141C')
    .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`)

  const xScale = d3.scaleBand()
    .domain(planets.map(d => d.planet))
    .rangeRound([0, width])
    .padding(0.1)

  const yScale = d3.scaleLinear()
    .domain([0, d3.max(planets.map(d => d.diameter))])
    .rangeRound([height, 0])

  const xAxis = svg.append('g')
    .attr('class', 'x axis')
    .attr('transform', `translate(0, ${height})`)
    .call(d3.axisBottom(xScale))
    .append('text')
    .attr('x', width / 2)
    .attr('y', 30)
    .attr('dy', '0.75em')
    .style('text-anchor', 'middle')
    .style('fill', '#00A0B0')
    .text('Planets')

  const yAxis = svg.append('g')
    .attr('class', 'y axis')
    .call(d3.axisLeft(yScale))
    .append('text')
    .style('text-anchor', 'end')
    .style('fill', '#00A0B0')
    .attr('y', 6)
    .attr('dy', '0.75em')
    .attr('transform', 'rotate(-90)')
    .text('Diameter (km)')

const bars = svg.selectAll('.bar')
  .data(planets)
  .enter().append('rect')
  .attr('class', 'bar')
  .attr('x', d => xScale(d.planet))
  .attr('y', height)
  .attr('width', xScale.bandwidth())
  .on('mouseover', function (d, i) {
    d3.select(this)
      .transition().duration(500)
      .style('fill-opacity', 1)
  })
  .on('mouseout', function (d, i) {
    d3.select(this)
      .transition().duration(500)
      .style('fill-opacity', 0.2)
  })
  .style('fill', '#00A0B0')
  .style('fill-opacity', 0.2)
  .style('stroke', '#00A0B0')
  .style('stroke-width', 1)
  .transition().duration(250).delay((d, i) => i * 200)
  .attr('y', d => yScale(d.diameter))
  .attr('height', d => height - yScale(d.diameter))

const formatter = d3.format(',')

const barTitle = svg.selectAll('.title')
  .data(planets)
  .enter().append('text')
  .attr('class', 'title')
  .attr('x', d => xScale(d.planet))
  .attr('dx', xScale.bandwidth() / 2)
  .attr('y', d => yScale(d.diameter))
  .attr('dy', '-0.6em')
  .style('fill', '#00A0B0')
  .style('text-anchor', 'middle')
  .style('opacity', 0)
  .text(d => formatter(d.diameter))
  .transition().duration(250).delay((d, i) => i * 200)
  .style('opacity', 1)


const chartTitle = svg.append('text')
  .attr('y', -50)
  .attr('x', width / 2)
  .style('text-anchor', 'middle')
  .style('fill', '#00A0B0')
  .style('font-weight', '800')
  .style('text-decoration', 'underline')
  .text('Planet Diameters')
})
